package com.cryptoagents.model;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;
import java.math.BigDecimal;

/**
 * Entity class for risk manager agent results.
 * 
 * Contains risk assessment data, volatility analysis, and risk metrics
 * generated by the Risk Manager Agent.
 */
@Getter
@Setter
@Entity
@Table(name = "risk_manager_reports")
@DiscriminatorValue("RISK_MANAGER")
public class RiskManagerReport extends AnalysisResult {
    
    @Column(name = "risk_score", precision = 5, scale = 2)
    private BigDecimal riskScore;
    
    @Enumerated(EnumType.STRING)
    @Column(name = "risk_level")
    private RiskLevel riskLevel;
    
    @Column(name = "volatility_score", precision = 5, scale = 2)
    private BigDecimal volatilityScore;
    
    @Column(name = "value_at_risk", precision = 19, scale = 8)
    private BigDecimal valueAtRisk;
    
    @Column(name = "max_drawdown", precision = 5, scale = 2)
    private BigDecimal maxDrawdown;
    
    @Column(name = "correlation_analysis", columnDefinition = "TEXT")
    private String correlationAnalysis;
    
    @Column(name = "liquidity_risk", precision = 5, scale = 2)
    private BigDecimal liquidityRisk;
    
    @Column(name = "market_cap_risk", precision = 5, scale = 2)
    private BigDecimal marketCapRisk;
    
    @Column(name = "regulatory_risk", precision = 5, scale = 2)
    private BigDecimal regulatoryRisk;
    
    @Column(name = "technical_risk", precision = 5, scale = 2)
    private BigDecimal technicalRisk;
    
    @Column(name = "concentration_risk", precision = 5, scale = 2)
    private BigDecimal concentrationRisk;
    
    @Column(name = "recommended_position_size", precision = 5, scale = 2)
    private BigDecimal recommendedPositionSize;
    
    @Column(name = "stop_loss_level", precision = 19, scale = 8)
    private BigDecimal stopLossLevel;
    
    @Column(name = "risk_mitigation_strategies", columnDefinition = "TEXT")
    private String riskMitigationStrategies;
    
    @Column(name = "stress_test_results", columnDefinition = "TEXT")
    private String stressTestResults;
    
    @Column(name = "beta_coefficient", precision = 5, scale = 4)
    private BigDecimal betaCoefficient;
    
    @Column(name = "sharpe_ratio", precision = 5, scale = 4)
    private BigDecimal sharpeRatio;
    
    // Constructors
    public RiskManagerReport() {
        super();
    }
    
    public RiskManagerReport(String ticker) {
        super(ticker, "RISK_MANAGER_AGENT");
    }
    
    /**
     * Enumeration for risk levels.
     */
    public enum RiskLevel {
        VERY_LOW,
        LOW,
        MODERATE,
        HIGH,
        VERY_HIGH,
        EXTREME
    }
} 