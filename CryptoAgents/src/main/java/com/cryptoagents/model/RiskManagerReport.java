package com.cryptoagents.model;

import jakarta.persistence.*;
import java.math.BigDecimal;

/**
 * Entity class for risk manager agent results.
 * 
 * Contains risk assessment data, volatility analysis, and risk metrics
 * generated by the Risk Manager Agent.
 */
@Entity
@Table(name = "risk_manager_reports")
@DiscriminatorValue("RISK_MANAGER")
public class RiskManagerReport extends AnalysisResult {
    
    @Column(name = "risk_score", precision = 5, scale = 2)
    private BigDecimal riskScore;
    
    @Enumerated(EnumType.STRING)
    @Column(name = "risk_level")
    private RiskLevel riskLevel;
    
    @Column(name = "volatility_score", precision = 5, scale = 2)
    private BigDecimal volatilityScore;
    
    @Column(name = "value_at_risk", precision = 19, scale = 8)
    private BigDecimal valueAtRisk;
    
    @Column(name = "max_drawdown", precision = 5, scale = 2)
    private BigDecimal maxDrawdown;
    
    @Column(name = "correlation_analysis", columnDefinition = "TEXT")
    private String correlationAnalysis;
    
    @Column(name = "liquidity_risk", precision = 5, scale = 2)
    private BigDecimal liquidityRisk;
    
    @Column(name = "market_cap_risk", precision = 5, scale = 2)
    private BigDecimal marketCapRisk;
    
    @Column(name = "regulatory_risk", precision = 5, scale = 2)
    private BigDecimal regulatoryRisk;
    
    @Column(name = "technical_risk", precision = 5, scale = 2)
    private BigDecimal technicalRisk;
    
    @Column(name = "concentration_risk", precision = 5, scale = 2)
    private BigDecimal concentrationRisk;
    
    @Column(name = "recommended_position_size", precision = 5, scale = 2)
    private BigDecimal recommendedPositionSize;
    
    @Column(name = "stop_loss_level", precision = 19, scale = 8)
    private BigDecimal stopLossLevel;
    
    @Column(name = "risk_mitigation_strategies", columnDefinition = "TEXT")
    private String riskMitigationStrategies;
    
    @Column(name = "stress_test_results", columnDefinition = "TEXT")
    private String stressTestResults;
    
    @Column(name = "beta_coefficient", precision = 5, scale = 4)
    private BigDecimal betaCoefficient;
    
    @Column(name = "sharpe_ratio", precision = 5, scale = 4)
    private BigDecimal sharpeRatio;
    
    // Constructors
    public RiskManagerReport() {
        super();
    }
    
    public RiskManagerReport(String ticker) {
        super(ticker, "RISK_MANAGER_AGENT");
    }
    
    // Getters and setters
    public BigDecimal getRiskScore() {
        return riskScore;
    }
    
    public void setRiskScore(BigDecimal riskScore) {
        this.riskScore = riskScore;
    }
    
    public RiskLevel getRiskLevel() {
        return riskLevel;
    }
    
    public void setRiskLevel(RiskLevel riskLevel) {
        this.riskLevel = riskLevel;
    }
    
    public BigDecimal getVolatilityScore() {
        return volatilityScore;
    }
    
    public void setVolatilityScore(BigDecimal volatilityScore) {
        this.volatilityScore = volatilityScore;
    }
    
    public BigDecimal getValueAtRisk() {
        return valueAtRisk;
    }
    
    public void setValueAtRisk(BigDecimal valueAtRisk) {
        this.valueAtRisk = valueAtRisk;
    }
    
    public BigDecimal getMaxDrawdown() {
        return maxDrawdown;
    }
    
    public void setMaxDrawdown(BigDecimal maxDrawdown) {
        this.maxDrawdown = maxDrawdown;
    }
    
    public String getCorrelationAnalysis() {
        return correlationAnalysis;
    }
    
    public void setCorrelationAnalysis(String correlationAnalysis) {
        this.correlationAnalysis = correlationAnalysis;
    }
    
    public BigDecimal getLiquidityRisk() {
        return liquidityRisk;
    }
    
    public void setLiquidityRisk(BigDecimal liquidityRisk) {
        this.liquidityRisk = liquidityRisk;
    }
    
    public BigDecimal getMarketCapRisk() {
        return marketCapRisk;
    }
    
    public void setMarketCapRisk(BigDecimal marketCapRisk) {
        this.marketCapRisk = marketCapRisk;
    }
    
    public BigDecimal getRegulatoryRisk() {
        return regulatoryRisk;
    }
    
    public void setRegulatoryRisk(BigDecimal regulatoryRisk) {
        this.regulatoryRisk = regulatoryRisk;
    }
    
    public BigDecimal getTechnicalRisk() {
        return technicalRisk;
    }
    
    public void setTechnicalRisk(BigDecimal technicalRisk) {
        this.technicalRisk = technicalRisk;
    }
    
    public BigDecimal getConcentrationRisk() {
        return concentrationRisk;
    }
    
    public void setConcentrationRisk(BigDecimal concentrationRisk) {
        this.concentrationRisk = concentrationRisk;
    }
    
    public BigDecimal getRecommendedPositionSize() {
        return recommendedPositionSize;
    }
    
    public void setRecommendedPositionSize(BigDecimal recommendedPositionSize) {
        this.recommendedPositionSize = recommendedPositionSize;
    }
    
    public BigDecimal getStopLossLevel() {
        return stopLossLevel;
    }
    
    public void setStopLossLevel(BigDecimal stopLossLevel) {
        this.stopLossLevel = stopLossLevel;
    }
    
    public String getRiskMitigationStrategies() {
        return riskMitigationStrategies;
    }
    
    public void setRiskMitigationStrategies(String riskMitigationStrategies) {
        this.riskMitigationStrategies = riskMitigationStrategies;
    }
    
    public String getStressTestResults() {
        return stressTestResults;
    }
    
    public void setStressTestResults(String stressTestResults) {
        this.stressTestResults = stressTestResults;
    }
    
    public BigDecimal getBetaCoefficient() {
        return betaCoefficient;
    }
    
    public void setBetaCoefficient(BigDecimal betaCoefficient) {
        this.betaCoefficient = betaCoefficient;
    }
    
    public BigDecimal getSharpeRatio() {
        return sharpeRatio;
    }
    
    public void setSharpeRatio(BigDecimal sharpeRatio) {
        this.sharpeRatio = sharpeRatio;
    }
    
    /**
     * Enumeration for risk levels.
     */
    public enum RiskLevel {
        VERY_LOW,
        LOW,
        MODERATE,
        HIGH,
        VERY_HIGH,
        EXTREME
    }
} 