package com.cryptoagents.model;

import jakarta.persistence.*;
import java.math.BigDecimal;
import java.util.List;

/**
 * Entity class for analyst agent results.
 * 
 * Contains technical analysis data, market trends, and trading signals
 * generated by the Analyst Agent.
 */
@Entity
@Table(name = "analyst_reports")
@DiscriminatorValue("ANALYST")
public class AnalystReport extends AnalysisResult {
    
    @Enumerated(EnumType.STRING)
    @Column(name = "market_trend", length = 20)
    private MarketTrend marketTrend;
    
    @Column(name = "technical_indicators", columnDefinition = "TEXT")
    private String technicalIndicators;
    
    @Column(name = "support_level", precision = 19, scale = 8)
    private BigDecimal supportLevel;
    
    @Column(name = "resistance_level", precision = 19, scale = 8)
    private BigDecimal resistanceLevel;
    
    @Column(name = "current_price", precision = 19, scale = 8)
    private BigDecimal currentPrice;
    
    @Column(name = "price_target", precision = 19, scale = 8)
    private BigDecimal priceTarget;
    
    @Enumerated(EnumType.STRING)
    @Column(name = "signal_strength")
    private SignalStrength signalStrength;
    
    @Column(name = "volume_analysis", columnDefinition = "TEXT")
    private String volumeAnalysis;
    
    @Column(name = "momentum_indicators", columnDefinition = "TEXT")
    private String momentumIndicators;
    
    @Column(name = "pattern_recognition", columnDefinition = "TEXT")
    private String patternRecognition;
    
    @Column(name = "time_horizon_days")
    private Integer timeHorizonDays;
    
    // Constructors
    public AnalystReport() {
        super();
    }
    
    public AnalystReport(String ticker) {
        super(ticker, "ANALYST_AGENT");
    }
    
    // Getters and setters
    public MarketTrend getMarketTrend() {
        return marketTrend;
    }
    
    public void setMarketTrend(MarketTrend marketTrend) {
        this.marketTrend = marketTrend;
    }
    
    public String getTechnicalIndicators() {
        return technicalIndicators;
    }
    
    public void setTechnicalIndicators(String technicalIndicators) {
        this.technicalIndicators = technicalIndicators;
    }
    
    public BigDecimal getSupportLevel() {
        return supportLevel;
    }
    
    public void setSupportLevel(BigDecimal supportLevel) {
        this.supportLevel = supportLevel;
    }
    
    public BigDecimal getResistanceLevel() {
        return resistanceLevel;
    }
    
    public void setResistanceLevel(BigDecimal resistanceLevel) {
        this.resistanceLevel = resistanceLevel;
    }
    
    public BigDecimal getCurrentPrice() {
        return currentPrice;
    }
    
    public void setCurrentPrice(BigDecimal currentPrice) {
        this.currentPrice = currentPrice;
    }
    
    public BigDecimal getPriceTarget() {
        return priceTarget;
    }
    
    public void setPriceTarget(BigDecimal priceTarget) {
        this.priceTarget = priceTarget;
    }
    
    public SignalStrength getSignalStrength() {
        return signalStrength;
    }
    
    public void setSignalStrength(SignalStrength signalStrength) {
        this.signalStrength = signalStrength;
    }
    
    public String getVolumeAnalysis() {
        return volumeAnalysis;
    }
    
    public void setVolumeAnalysis(String volumeAnalysis) {
        this.volumeAnalysis = volumeAnalysis;
    }
    
    public String getMomentumIndicators() {
        return momentumIndicators;
    }
    
    public void setMomentumIndicators(String momentumIndicators) {
        this.momentumIndicators = momentumIndicators;
    }
    
    public String getPatternRecognition() {
        return patternRecognition;
    }
    
    public void setPatternRecognition(String patternRecognition) {
        this.patternRecognition = patternRecognition;
    }
    
    public Integer getTimeHorizonDays() {
        return timeHorizonDays;
    }
    
    public void setTimeHorizonDays(Integer timeHorizonDays) {
        this.timeHorizonDays = timeHorizonDays;
    }
    
    /**
     * Enumeration for market trend directions.
     */
    public enum MarketTrend {
        BULLISH,
        BEARISH,
        SIDEWAYS,
        VOLATILE,
        UNCERTAIN
    }
    
    /**
     * Enumeration for signal strength levels.
     */
    public enum SignalStrength {
        VERY_WEAK,
        WEAK,
        MODERATE,
        STRONG,
        VERY_STRONG
    }
} 