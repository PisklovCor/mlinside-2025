package com.cryptoagents.model;

import jakarta.persistence.*;
import java.math.BigDecimal;
import java.time.LocalDateTime;

/**
 * Entity class for trader agent results.
 * 
 * Contains trading recommendations, position sizing, and execution strategies
 * generated by the Trader Agent.
 */
@Entity
@Table(name = "trader_reports")
@DiscriminatorValue("TRADER")
public class TraderReport extends AnalysisResult {
    
    @Enumerated(EnumType.STRING)
    @Column(name = "action_recommendation", nullable = false)
    private TradingAction actionRecommendation;
    
    @Column(name = "entry_price", precision = 19, scale = 8)
    private BigDecimal entryPrice;
    
    @Column(name = "exit_price", precision = 19, scale = 8)
    private BigDecimal exitPrice;
    
    @Column(name = "stop_loss", precision = 19, scale = 8)
    private BigDecimal stopLoss;
    
    @Column(name = "take_profit", precision = 19, scale = 8)
    private BigDecimal takeProfit;
    
    @Column(name = "position_size", precision = 19, scale = 8)
    private BigDecimal positionSize;
    
    @Column(name = "risk_reward_ratio", precision = 5, scale = 2)
    private BigDecimal riskRewardRatio;
    
    @Enumerated(EnumType.STRING)
    @Column(name = "order_type")
    private OrderType orderType;
    
    @Enumerated(EnumType.STRING)
    @Column(name = "time_in_force")
    private TimeInForce timeInForce;
    
    @Column(name = "execution_strategy", columnDefinition = "TEXT")
    private String executionStrategy;
    
    @Column(name = "market_timing", columnDefinition = "TEXT")
    private String marketTiming;
    
    @Column(name = "expected_return", precision = 5, scale = 2)
    private BigDecimal expectedReturn;
    
    @Column(name = "holding_period_days")
    private Integer holdingPeriodDays;
    
    @Column(name = "urgency_level")
    private Integer urgencyLevel;
    
    @Column(name = "trading_rationale", columnDefinition = "TEXT")
    private String tradingRationale;
    
    @Column(name = "portfolio_allocation", precision = 5, scale = 2)
    private BigDecimal portfolioAllocation;
    
    @Column(name = "slippage_tolerance", precision = 5, scale = 4)
    private BigDecimal slippageTolerance;
    
    @Column(name = "execution_deadline")
    private LocalDateTime executionDeadline;
    
    @Column(name = "alternative_scenarios", columnDefinition = "TEXT")
    private String alternativeScenarios;
    
    // Constructors
    public TraderReport() {
        super();
    }
    
    public TraderReport(String ticker) {
        super(ticker, "TRADER_AGENT");
    }
    
    // Getters and setters
    public TradingAction getActionRecommendation() {
        return actionRecommendation;
    }
    
    public void setActionRecommendation(TradingAction actionRecommendation) {
        this.actionRecommendation = actionRecommendation;
    }
    
    public BigDecimal getEntryPrice() {
        return entryPrice;
    }
    
    public void setEntryPrice(BigDecimal entryPrice) {
        this.entryPrice = entryPrice;
    }
    
    public BigDecimal getExitPrice() {
        return exitPrice;
    }
    
    public void setExitPrice(BigDecimal exitPrice) {
        this.exitPrice = exitPrice;
    }
    
    public BigDecimal getStopLoss() {
        return stopLoss;
    }
    
    public void setStopLoss(BigDecimal stopLoss) {
        this.stopLoss = stopLoss;
    }
    
    public BigDecimal getTakeProfit() {
        return takeProfit;
    }
    
    public void setTakeProfit(BigDecimal takeProfit) {
        this.takeProfit = takeProfit;
    }
    
    public BigDecimal getPositionSize() {
        return positionSize;
    }
    
    public void setPositionSize(BigDecimal positionSize) {
        this.positionSize = positionSize;
    }
    
    public BigDecimal getRiskRewardRatio() {
        return riskRewardRatio;
    }
    
    public void setRiskRewardRatio(BigDecimal riskRewardRatio) {
        this.riskRewardRatio = riskRewardRatio;
    }
    
    public OrderType getOrderType() {
        return orderType;
    }
    
    public void setOrderType(OrderType orderType) {
        this.orderType = orderType;
    }
    
    public TimeInForce getTimeInForce() {
        return timeInForce;
    }
    
    public void setTimeInForce(TimeInForce timeInForce) {
        this.timeInForce = timeInForce;
    }
    
    public String getExecutionStrategy() {
        return executionStrategy;
    }
    
    public void setExecutionStrategy(String executionStrategy) {
        this.executionStrategy = executionStrategy;
    }
    
    public String getMarketTiming() {
        return marketTiming;
    }
    
    public void setMarketTiming(String marketTiming) {
        this.marketTiming = marketTiming;
    }
    
    public BigDecimal getExpectedReturn() {
        return expectedReturn;
    }
    
    public void setExpectedReturn(BigDecimal expectedReturn) {
        this.expectedReturn = expectedReturn;
    }
    
    public Integer getHoldingPeriodDays() {
        return holdingPeriodDays;
    }
    
    public void setHoldingPeriodDays(Integer holdingPeriodDays) {
        this.holdingPeriodDays = holdingPeriodDays;
    }
    
    public Integer getUrgencyLevel() {
        return urgencyLevel;
    }
    
    public void setUrgencyLevel(Integer urgencyLevel) {
        this.urgencyLevel = urgencyLevel;
    }
    
    public String getTradingRationale() {
        return tradingRationale;
    }
    
    public void setTradingRationale(String tradingRationale) {
        this.tradingRationale = tradingRationale;
    }
    
    public BigDecimal getPortfolioAllocation() {
        return portfolioAllocation;
    }
    
    public void setPortfolioAllocation(BigDecimal portfolioAllocation) {
        this.portfolioAllocation = portfolioAllocation;
    }
    
    public BigDecimal getSlippageTolerance() {
        return slippageTolerance;
    }
    
    public void setSlippageTolerance(BigDecimal slippageTolerance) {
        this.slippageTolerance = slippageTolerance;
    }
    
    public LocalDateTime getExecutionDeadline() {
        return executionDeadline;
    }
    
    public void setExecutionDeadline(LocalDateTime executionDeadline) {
        this.executionDeadline = executionDeadline;
    }
    
    public String getAlternativeScenarios() {
        return alternativeScenarios;
    }
    
    public void setAlternativeScenarios(String alternativeScenarios) {
        this.alternativeScenarios = alternativeScenarios;
    }
    
    /**
     * Enumeration for trading actions.
     */
    public enum TradingAction {
        BUY,
        SELL,
        HOLD,
        BUY_STRONG,
        SELL_STRONG,
        ACCUMULATE,
        DISTRIBUTE,
        WAIT
    }
    
    /**
     * Enumeration for order types.
     */
    public enum OrderType {
        MARKET,
        LIMIT,
        STOP,
        STOP_LIMIT,
        TRAILING_STOP,
        ICEBERG,
        TWAP,
        VWAP
    }
    
    /**
     * Enumeration for time in force options.
     */
    public enum TimeInForce {
        GTC,  // Good Till Cancelled
        IOC,  // Immediate Or Cancel
        FOK,  // Fill Or Kill
        DAY,  // Day Order
        GTD   // Good Till Date
    }
} 